image: "registry.gitlab.com/n8rzz/ruby-rails-node-chrome-runner:latest"

services:
  - postgres:11-alpine

stages:
  - build
  - lint
  - test
  - container:build
  - container:deploy
  - deploy

variables:
  APP_NAME_DEVELOP: xray-shopper-develop
  APP_NAME_STAGE: xray-shopper-stage
  APP_NAME_MASTER: xray-shopper
  APP_CONTAINER_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/app
  WEB_CONTAINER_NAME: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/nginx
  POSTGRES_DB: postgres
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: threeve

before_script:
  - date
  - echo $PATH

.build-base: &build-base
  before_script:
  - which ruby
  - bundle install --jobs $(nproc) "${FLAGS[@]}"
  - ruby -v
  - bin/rails -v
  - node -v
  - yarn --version
  - cp config/database.gitlab.yml config/database.yml
  - RAILS_ENV=test bundle exec rails db:create db:schema:load || true
  - yarn install

.container-defaults: &container-defaults
  before_script:
    - '[[ -f ~/.docker/config.json ]] && rm -f ~/.docker/config.json && echo "Removed cached credentials"'
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:assets:
  <<: *build-base
  stage: build
  script:
    - rails assets:precompile

eslint:
  stage: lint
  script:
    - yarn install
    - yarn lint

styelint:
  stage: lint
  script:
    - yarn install
    - yarn lint:style

rubocop:
  <<: *build-base
  stage: lint
  script:
    - bundle exec rubocop --config .rubocop.yml

jest:
  stage: test
  script:
    - yarn install
    - yarn test:coverage
  artifacts:
    expire_in: 1 day
    paths:
      - coverage/

rspec:unit:
  <<: *build-base
  stage: test
  allow_failure: true
  script:
    - RAILS_ENV=test bundle exec rspec --exclude-pattern "spec/features/**/*_spec.rb"

rspec:feature:
  <<: *build-base
  stage: test
  allow_failure: true
  script:
    - RAILS_ENV=test bundle exec rspec spec/features/**/*_spec.rb --failure-exit-code 0
    - RAILS_ENV=test bundle exec rspec spec/features/**/*_spec.rb --only-failures

container:build:app:
  <<: *container-defaults
  stage: container:build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  only:
    - develop
    - stage
    - master
    - tags
  script:
    - docker pull $APP_CONTAINER_NAME:latest || true
    - docker build -f production.Dockerfile --cache-from $APP_CONTAINER_NAME:latest --build-arg rails_master_key=$RAILS_MASTER_KEY --build-arg secret_key_base=$SECRET_KEY_BASE -t $APP_CONTAINER_NAME .
    - docker push $APP_CONTAINER_NAME

container:build:nginx:
  <<: *container-defaults
  stage: container:build
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  only:
    - develop
    - stage
    - master
    - tags
  script:
    - docker pull $WEB_CONTAINER_NAME:latest || true
    - docker build -t $WEB_CONTAINER_NAME:latest -f nginx.Dockerfile .
    - docker push $WEB_CONTAINER_NAME:latest

container:build:compose:
  stage: container:build
  only:
    - develop
    - stage
    - master
    - tags
  script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$DO_KEY")
    - mkdir -p ~/.ssh
    - scp -o StrictHostKeyChecking=no ./docker-compose.production.yml root@$DO_IP:docker-compose.yml

container:deploy:compose:
  stage: container:deploy
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  tags:
    - dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  only:
    - develop
    - stage
    - master
    - tags
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - 'which ssh-agent || ( apk add openssh-client bash )'
    - eval $(ssh-agent -s)
    - echo "$DO_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - chmod +x ./script/deploy.sh
    - bash ./script/deploy.sh

deploy:develop:
  stage: deploy
  environment:
    name: develop
  allow_failure: true
  except:
    - tags
    - stage
    - master
  script:
    - dpl --provider=heroku --app=$APP_NAME_DEVELOP --api_key=$HEROKU_API_KEY

deploy:master:
  allow_failure: true
  stage: deploy
  environment:
    name: stage
  only:
    - master
  script:
    - dpl --provider=heroku --app=$APP_NAME_STAGE --api_key=$HEROKU_API_KEY

deploy:release:
  allow_failure: true
  stage: deploy
  environment:
    name: production
  only:
    - tags
  script:
    - dpl --provider=heroku --app=$APP_NAME_MASTER --api_key=$HEROKU_API_KEY
