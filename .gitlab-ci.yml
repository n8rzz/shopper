image: "registry.gitlab.com/n8rzz/ruby-rails-node-chrome-runner:latest"

services:
  - postgres:11-alpine

stages:
  - build
  - lint
  - test
  # - container
  - deploy

variables:
  APP_NAME_DEVELOP: xray-shopper-develop
  APP_NAME_STAGE: xray-shopper-stage
  APP_NAME_MASTER: xray-shopper
  POSTGRES_DB: postgres
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: threeve
  CONTAINER_IMAGE: xray-shopper

before_script:
  - date
  - echo $PATH
  - ps -ef | grep postgres
  - ruby -v
  - which ruby
  - bundle install  --jobs $(nproc) "${FLAGS[@]}"
  - bin/rails -v
  - cp config/database.gitlab.yml config/database.yml
  - RAILS_ENV=test bundle exec rails db:create db:schema:load || true
  - node -v
  - yarn --version
  - yarn install

build:
  stage: build
  script:
    - rails assets:precompile

eslint:
  stage: lint
  script:
    - yarn lint

styelint:
  stage: lint
  script:
    - yarn lint:style

rubocop:
  stage: lint
  script:
    - bundle exec rubocop --config .rubocop.yml

jest:
  stage: test
  script:
    - yarn test:coverage
  artifacts:
    expire_in: 1 day
    paths:
      - coverage/

rspec:unit:
  stage: test
  allow_failure: true
  script:
    - RAILS_ENV=test bundle exec rspec --exclude-pattern "spec/features/**/*_spec.rb"

rspec:feature:
  allow_failure: true
  stage: test
  script:
    - RAILS_ENV=test bundle exec rspec spec/features/**/*_spec.rb --failure-exit-code 0
    - RAILS_ENV=test bundle exec rspec spec/features/**/*_spec.rb --only-failures

# TODO: not currently using Docker deployments
# container:
#   stage: container
#   image: docker:19.03.0
#   services:
#     - docker:19.03.0-dind
#   tags:
#     - dind
#   variables:
#     DOCKER_DRIVER: overlay2
#     # Create the certificates inside this directory for both the server
#     # and client. The certificates used by the client will be created in
#     # /certs/client so we only need to share this directory with the
#     # volume mount in `config.toml`.
#     DOCKER_TLS_CERTDIR: "/certs"
#   # only:
#   #   - develop
#   #   - stage
#   #   - master
#   #   - tags
#   before_script:
#     - docker info
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker pull $CONTAINER_IMAGE:master || true
#     - docker build --cache-from $CONTAINER_IMAGE:master --tag $CONTAINER_IMAGE:master .
#     # - docker push $CONTAINER_IMAGE:$CI_COMMIT_REF_NAME

# container:publish:
#   stage: container
#   only:
#     - develop
#     - stage
#     - master
#     - tags
#   # artifact dependency
#   script:
#     - echo "Publish Docker Container"

deploy:develop:
  stage: deploy
  environment:
    name: develop
  allow_failure: true
  except:
    - tags
    - stage
    - master
  script:
    - dpl --provider=heroku --app=$APP_NAME_DEVELOP --api_key=$HEROKU_API_KEY

deploy:stage:
  allow_failure: true
  stage: deploy
  environment:
    name: stage
  only:
    - stage
  script:
    - dpl --provider=heroku --app=$APP_NAME_STAGE --api_key=$HEROKU_API_KEY

deploy:master:
  allow_failure: true
  stage: deploy
  environment:
    name: production
  only:
    - master
  script:
    - dpl --provider=heroku --app=$APP_NAME_MASTER --api_key=$HEROKU_API_KEY

deploy:release:
  allow_failure: true
  stage: deploy
  environment:
    name: production
  only:
    - tags
  script:
    - dpl --provider=heroku --app=$APP_NAME_MASTER --api_key=$HEROKU_API_KEY
